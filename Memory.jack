// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array heap;
    static Array ram;
    static int freeList;

    /** Initializes the class. */
    function void init() {
        let ram = 0;
        let heap = 2048;        // heap base
        let freeList = 2048;
        let heap[0] = 0;        // next
        let heap[1] = 14334;    // length
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        var int val;
        let val = ram[address];
        return val;
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var int next, block;

        let next = freeList;

        // ram[next+1] - segment size
        // ram[next] - segment address
        while (ram[next+1] < size + 2) {
            let next = ram[next];
        }
        // found a possible block
        let block = next + 1 + ram[next+1] - size + 1 - 2; // block memory address (after the header)
        let ram[next+1] = ram[next+1] - size -2; // reduce the size of heap segment
        let ram[block+1] = size; // set block size in the header
        let ram[block] = block+2;

        // return base address
        return block+2;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        // o is an address, give o - 2 back to the freelist
        // instead of append, I will do prepend
        var int block;

        let block = o-2;
        
        let ram[o-2] = freeList;    // block now points to what freeList used to point to
        let freeList = block;       // free list now points to block;
        return;
    }
}
